<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Book;

use TCPDF;

use PDF;


class ReportController extends Controller
{
    //

    public function index()
    {
        $books = Book::with('author')->get();
        return view('reports.index', compact('books'));
    }

    // public function generatePDF(Request $request)
    // {

    //     // Validate the date range input
    //     $request->validate([
    //         'from_date' => 'required|date',
    //         'to_date' => 'required|date|after_or_equal:from_date',
    //     ]);

    //     // Retrieve the input dates
    //     $fromDate = $request->input('from_date');
    //     $toDate = $request->input('to_date');

    //     // Filter books by date range
    //     $books = Book::with('author')
    //         ->whereBetween('created_at', [$fromDate, $toDate])
    //         ->get();

    //     //$books = Book::with('author')->get();

    //     // Create new PDF document
    //     $pdf = new TCPDF();
    //     $pdf->SetCreator(PDF_CREATOR);
    //     //$pdf->SetAuthor('Your Name');
    //     $pdf->SetTitle('Books and Authors Report');
    //     $pdf->SetSubject('Report');
    //     $pdf->SetKeywords('TCPDF, PDF, report, book, author');

    //     // Set default header data
    //     //$pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, 'Books and Authors Report', 'Generated by Laravel');

    //     // Custom header with date range
    //     $headerTitle = 'Books and Authors Report';
    //     $headerString = 'From: ' . date('d-m-Y', strtotime($fromDate)) . ' To: ' . date('d-m-Y', strtotime($toDate));
    //     $pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, $headerTitle, $headerString);

    //     // Set margins
    //     $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
    //     $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
    //     $pdf->SetFooterMargin(PDF_MARGIN_FOOTER);

    //     // Set auto page breaks
    //     $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

    //     // Set font
    //     $pdf->SetFont('helvetica', '', 12);

    //     // Add a page
    //     $pdf->AddPage();

    //     // Set content
    //     $html = '';

    //     $html .= '<table border="1" cellpadding="4">';
    //     $html .= '<thead>
    //                 <tr>
    //                     <th>Book Name</th>
    //                     <th>Author</th>
    //                     <th>Date</th>
    //                 </tr>
    //               </thead>
    //               <tbody>';

    //     foreach ($books as $book) {

    //         $formattedDate =  $book->created_at->format('Y-m-d');

    //         $html .= '<tr>
    //                     <td>' . $book->title . '</td>
    //                     <td>' . $book->author->name . '</td>
    //                     <td>' . $formattedDate . ' </td>
    //                   </tr>';
    //     }

    //     $html .= '</tbody></table>';


    //     // Output the HTML content
    //     $pdf->writeHTML($html, true, false, true, false, '');

    //     // Close and output PDF document
    //     $pdf->Output('books_authors_report.pdf', 'I'); // 'I' for inline display, 'D' for download

    //     // The code below will never be executed as PDF output has been set above
    //     exit;
    // }

    // Filter books by date range




    public function generatePDF(Request $request)
    {
        // Validate the date range input
        $request->validate([
            'from_date' => 'required|date',
            'to_date' => 'required|date|after_or_equal:from_date',
        ]);

        // Retrieve the input dates
        $fromDate = $request->input('from_date');
        $toDate = $request->input('to_date');

        // Filter books by date range
        $books = Book::with('author')
            ->whereBetween('created_at', [$fromDate, $toDate])
            ->get();

        // Create new PDF document
        $pdf = new TCPDF();
        $pdf->SetTitle('Books and Authors Report');
        $pdf->AddPage('L', 'A4');
        $pdf->SetFont('helvetica', 'B', 20);
        $pdf->SetY(25);
        $pdf->SetX(10);
        $pdf->Ln();
        $pdf->SetFont('helvetica', 'BU', 14);
        $pdf->SetX(10);
        $pdf->Cell(0, 10, 'Books and Authors Report', 0, 0, 'C');
        $pdf->Ln();
        $pdf->SetFont('helvetica', 'B', 10);
        $pdf->Cell(0, 6, 'From: ' . $fromDate . ' To: ' . $toDate, 0, 0, 'C');
        $pdf->Ln();

        // Define column widths
        $columnWidths = [22, 65, 30, 30];
        $totalWidth = array_sum($columnWidths);
        $pageWidth = $pdf->getPageWidth();
        $xPosition = ($pageWidth - $totalWidth) / 2;

        // Set X position to center the table
        $pdf->SetX($xPosition);

        // Table header
        $pdf->SetFont('helvetica', 'B', 10);
        $pdf->MultiCell($columnWidths[0], 10, "S/N", 1, 'C', 0, 0, '', '', true);
        $pdf->MultiCell($columnWidths[1], 10, "Book Title", 1, 'C', 0, 0, '', '', true);
        $pdf->MultiCell($columnWidths[2], 10, "Author", 1, 'C', 0, 0, '', '', true);
        $pdf->MultiCell($columnWidths[3], 10, "Date", 1, 'C', 0, 1, '', '', true);

        // Reset X position after header
        $pdf->SetX($xPosition);

        // Table data
        $pdf->SetFont('helvetica', '', 10);
        $bookCount = 1;

        foreach ($books as $book) {
            // Check if the content will fit on the current page
            $height = 10; // Adjust the height as needed
            if ($pdf->GetY() + $height > $pdf->getPageHeight() - $pdf->getFooterMargin()) {
                $pdf->AddPage();
                $pdf->SetX($xPosition); // Reset X position after adding a new page
            }
            $pdf->MultiCell($columnWidths[0], $height, $bookCount, 1, 'C', 0, 0, '', '', true);
            $pdf->MultiCell($columnWidths[1], $height, $book->title, 1, 'L', 0, 0, '', '', true);
            $pdf->MultiCell($columnWidths[2], $height, $book->author->name, 1, 'L', 0, 0, '', '', true);
            $pdf->MultiCell($columnWidths[3], $height, $book->created_at->format('Y-m-d'), 1, 'C', 0, 1, '', '', true);

            $bookCount++;

            $pdf->SetX($xPosition);
        }

        // Output the PDF
        $pdf->Output('books_authors_report.pdf', 'I');
    }







    public function loadPDF($results, $from_date, $to_date)
    {

        $pdf = new PDF;

        $data = [
            'from_date' => $from_date,
            'to_date' => $to_date,
            'report_data' => $results,
            'report_name' => 'LIBRARY REPORT',
            'pdf' => $pdf
        ];

        $filename = 'report_pdf.pdf';
        $view = \View::make('Reports.library-report', $data);
        $html = $view->render();
        $pdf::writeHTML($html, true, false, true, false, '');
        $pdf::Output('PDF-Report.pdf', 'I');
    }
}
